library(tidyverse)
library(RNHANES)
library(ggsci)
library(Hmisc)
library(ggthemes)
d09 <- nhanes_load_data("BMX_F", "2009-2010") %>%
transmute(SEQN=SEQN, BMXBMI=BMXBMI, wave=cycle) %>%
left_join(nhanes_load_data("DEMO_F", "2009-2010"), by="SEQN") %>%
select(SEQN, BMXBMI, RIDAGEYR, RIAGENDR, wave, RIDEXPRG, WTINT2YR)
d11 <- nhanes_load_data("BMX_G", "2011-2012") %>%
transmute(SEQN=SEQN, BMXBMI=BMXBMI, wave=cycle) %>%
left_join(nhanes_load_data("DEMO_G", "2011-2012"), by="SEQN") %>%
select(SEQN, BMXBMI, RIDAGEYR, RIAGENDR, wave, RIDEXPRG, WTINT2YR)
df <- expand.grid(x = 0:5, y = 0:5)
df$z <- runif(nrow(df))
View(df)
d13 <- nhanes_load_data("BMX_H", "2013-2014") %>%
transmute(SEQN=SEQN, BMXBMI=BMXBMI, wave=cycle) %>%
left_join(nhanes_load_data("DEMO_H", "2013-2014"), by="SEQN") %>%
select(SEQN, BMXBMI, RIDAGEYR, RIAGENDR, RIDRETH3, wave, RIDEXPRG, WTINT2YR)
dat = bind_rows(d05,d07,d09,d11,d13)
colnames(d11)
colnames(d13)
View(dat)
clean_dat = dat %>%
filter(!is.na(BMXBMI), RIDAGEYR >= 20, (RIDEXPRG != 1 | is.na(RIDEXPRG)))%>%
mutate(
age_group = case_when(
RIDAGEYR >= 20 & RIDAGEYR < 40 ~ '20-39',
RIDAGEYR >= 40 & RIDAGEYR < 60 ~ '40-59',
RIDAGEYR >= 60 ~ "60+"
),
age_group = as.factor(age_group),
race = recode_factor(RIDRETH3,
`1` = "Hispanic",
`2` = "Hispanic",
`3` = "Non-Hispanic, White",
`4` = "Non-Hispanic, Black",
`6` = "Non-Hispanic, Asian",
`7` = "Others"),
gender = recode_factor(RIAGENDR,
`1` = "Men",
`2` = "Women")
)
View(clean_dat)
clean_dat %?% slice(1:5)
clean_dat %>% slice(1:5)
clean_dat %>%
filter(wave = '2013-2014') %>%
group_by(age_group,gender)
clean_dat %>%
filter(wave == '2013-2014') %>%
group_by(age_group,gender)
clean_dat %>%
filter(wave == '2013-2014') %>%
group_by(age_group,gender) %>%
tally()
View(clean_dat)
men %>%
slice(1:5)
men = clean_dat %>%
filter(gender == "Men") %>%
group_by(wave) %>%
summarise(
"5%" = wtd.quantile(BMXBMI, WTINT2YR, probs=c(.05)),
"10%" = wtd.quantile(BMXBMI, WTINT2YR, probs=c(.1)),
"25%" = wtd.quantile(BMXBMI, WTINT2YR, probs=c(.25)),
"50%" = wtd.quantile(BMXBMI, WTINT2YR, probs=c(.5)),
"75%" = wtd.quantile(BMXBMI, WTINT2YR, probs=c(.75)),
"90%" = wtd.quantile(BMXBMI, WTINT2YR, probs=c(.90)),
"95%" = wtd.quantile(BMXBMI, WTINT2YR, probs=c(.95))
) %>%
gather("%", bmi, -wave)
men %>%
slice(1:5)
women = clean_dat %>%
filter(gender == "Women") %>%
group_by(wave) %>%
summarise(
"5%" = wtd.quantile(BMXBMI, WTINT2YR, probs=c(.05)),
"10%" = wtd.quantile(BMXBMI, WTINT2YR, probs=c(.1)),
"25%" = wtd.quantile(BMXBMI, WTINT2YR, probs=c(.25)),
"50%" = wtd.quantile(BMXBMI, WTBMI2YR, probs=c(.5)),
"75%" = wtd.quantile(BMXBMI, WTINT2YR, probs=c(.75)),
"90%" = wtd.quantile(BMXBMI, WTINT2YR, probs=c(.90)),
"95%" = wtd.quantile(BMXBMI, WTINT2YR, probs=c(.95))
) %>%
gather("%", bmi, -wave)
women = clean_dat %>%
filter(gender == "Women") %>%
group_by(wave) %>%
summarise(
"5%" = wtd.quantile(BMXBMI, WTINT2YR, probs=c(.05)),
"10%" = wtd.quantile(BMXBMI, WTINT2YR, probs=c(.1)),
"25%" = wtd.quantile(BMXBMI, WTINT2YR, probs=c(.25)),
"50%" = wtd.quantile(BMXBMI, WTINT2YR, probs=c(.5)),
"75%" = wtd.quantile(BMXBMI, WTINT2YR, probs=c(.75)),
"90%" = wtd.quantile(BMXBMI, WTINT2YR, probs=c(.90)),
"95%" = wtd.quantile(BMXBMI, WTINT2YR, probs=c(.95))
) %>%
gather("%", bmi, -wave)
ggplot(men, aes(wave, bmi, fill = `%`, group = `%`)) +
geom_line(color = "black", size = 0.3) +
geom_point(colour="black", pch=21, size = 3) +
scale_fill_jama() +
theme_hc() +
theme(text = element_text(family = "serif", size = 11), legend.position="none") +
labs(
title = "Weighted Percentiles of Body Mass Index by Survey Cycle",
subtitle = "Men",
caption = "Source: NHANES 2005-2014 survey",
x = "Survey Cycle Years",
y = "Body Mass Index"
) +
scale_y_continuous(limits=c(15,45), breaks=seq(15,45, by = 5)) +
annotate("text",
x = "2013-2014",
y = c(20.7, 22.0, 24.8, 27.8, 31.9, 36.2, 40.3),
label = c(" 5%", "10%", "25%", "50%", "75%", "90%", "95%"),
hjust = -0.5, colour = "#444444", size = 3)
ggplot(women, aes(wave, bmi, fill = `%`, group = `%`)) +
geom_line(color = "black", size = 0.3) +
geom_point(colour="black", pch=21, size = 3) +
scale_fill_jama() +
theme_hc() +
theme(text = element_text(family = "serif", size = 11), legend.position="none") +
labs(
title = "Weighted Percentiles of Body Mass Index by Survey Cycle",
subtitle = "Women",
caption = "Source: NHANES 2005-2014 survey",
x = "Survey Cycle Years",
y = "Body Mass Index"
) +
scale_y_continuous(limits=c(15,45), breaks=seq(15,45, by = 5)) +
annotate("text",
x = "2013-2014",
y = c(19.6, 21.1, 23.7, 28.0, 33.5, 39.8, 43.8),
label = c(" 5%", "10%", "25%", "50%", "75%", "90%", "95%"),
hjust = -0.5, colour = "#444444", size = 3)
ggplot(men, aes(wave, bmi, fill = `%`, group = `%`)) +
geom_line(color = "black", size = 0.3)
MEN
men
ggplot(men, aes(wave, bmi, fill = `%`, group = `%`)) +
geom_line(color = "black", size = 0.3) +
geom_point(colour="black", pch=21, size = 3)
ggplot(men, aes(wave, bmi, fill = `%`, group = `%`)) +
geom_line(color = "black", size = 0.3) +
geom_point(colour="black", pch=21, size = 3) +
scale_fill_jama()
ggplot(men, aes(wave, bmi, fill = `%`, group = `%`)) +
geom_line(color = "black", size = 0.3) +
geom_point(colour="black", pch=21, size = 3) +
scale_fill_jama() +
theme_hc()
View(dt)
library(tibble)
data_01_12 = dt %>%
tibble::column_to_rownames("ID") %>%
slice(1:5)
library(tidyverse)
data_01_12 = dt %>%
tibble::column_to_rownames("ID") %>%
slice(1:5)
colnames(dt)
nrow(dt)
data_01_12 = dt %>%
tibble::column_to_rownames("ID") %>%
slice(1:3)
rlang::last_error()
mtcars %>%
tibble::rownames_to_column('Car') %>%
slice(1:3)
str(mtcars)
dt %>%
tibble::column_to_rownames("ID") %>%
slice(1:3)
data_01_12 = dt %>%
tibble::rownames_to_column("ID") %>%
slice(1:3)
View(data_01_12)
mtcars %>%
tibble::rownames_to_column('Car') %>%
tidyr::separate('Car',c('brand','model'),remove = FALSE) %>%
slice(1:5)
library(dplyr)
library(ggplot2)
mtcars %>%
tibble::rownames_to_column('Car') %>%
tidyr::separate('Car',c('brand','model'),remove = FALSE) %>%
group_by("brand") %>%
summarise(avt_mpg = mean(mpg)) %>%
ggplot() + geom_bar(aes(brand,avg_mpg))
mtcars %>%
tibble::rownames_to_column('Car') %>%
tidyr::separate('Car',c('brand','model'),remove = FALSE) %>%
group_by(brand) %>%
summarise(avt_mpg = mean(mpg)) %>%
ggplot() + geom_bar(aes(brand,avg_mpg),stat = 'identity')
mtcars %>%
tibble::rownames_to_column('Car') %>%
tidyr::separate('Car',c('brand','model'),remove = FALSE) %>%
group_by(brand) %>%
summarise(avg_mpg = mean(mpg)) %>%
ggplot() + geom_bar(aes(brand,avg_mpg),stat = 'identity')
mtcars %>%
tibble::rownames_to_column('Car') %>%
tidyr::separate('Car',c('brand','model'),remove = FALSE) %>%
group_by(brand) %>%
summarise(avg_mpg = mean(mpg)) %>%
ggplot() + geom_bar(aes(reorder(brand,avg_mpg),avg_mpg),stat = 'identity') +
theme(axis.text.x = element_text(angle = 90,hjust = 1))
?reorder
library(DataExplorer)
install.packages('DataExplorer')
githubinstall::githubinstall('DataExplorer')
library(rmarkdown)
library(DataExplorer)
library(DataExplorer)
install.packages("https://cran.r-project.org/src/contrib/Archive/DataExplorer/DataExplorer_0.5.0.tar.gz", repo=NULL, type="source")
install.packages("https://cran.r-project.org/src/contrib/Archive/DataExplorer/DataExplorer_0.4.0.tar.gz", repo=NULL, type="source")
install.packages("https://cran.r-project.org/src/contrib/Archive/DataExplorer/DataExplorer_0.4.0.tar.gz", repo=NULL, type="source")
install.packages("reshape2")
install.packages("https://cran.r-project.org/src/contrib/Archive/DataExplorer/DataExplorer_0.4.0.tar.gz", repo=NULL, type="source")
choco = read.csv("../flavors_of_cacao.csv",header = T,stringsAsFactors = F)
choco = read.csv("../flavors_of_cacao.csv",header = T,stringsAsFactors = F)
choco = read.csv("./flavors_of_cacao.csv",header = T,stringsAsFactors = F)
choco = read.csv("../flavors_of_cacao.csv",header = T,stringsAsFactors = F)
choco = read.csv("flavors_of_cacao.csv",header = T,stringsAsFactors = F)
choco = read.csv("/flavors_of_cacao.csv",header = T,stringsAsFactors = F)
getwd()
choco = read.csv("flavors_of_cacao.csv",header = T,stringsAsFactors = F)
View(choco)
choco$Cocoa.Percent = as.numeric(gsub('%','',choco$Cocoa.Percent))
choco$Review.Date = as.character(choco$Review.Date)
plot_str(choco)
library(DataExplorer)
plot_str(choco)
?PlotStr
plotStr(choco)
PlotStr(choco)
PlotMissing(choco)
?plot.histogram
HistogramContinuous(choco)
DensityContinuous(choco)
CorrelationContinuous(choco,type = 'continous','Review.Data')
CorrelationContinuous(choco)
BarDiscrete(choco)
??`DataExplorer-package`
help(package = "DataExplorer")
GenerateReport(choco)
Sys.getenv("HOME")
package.skeleton(name = "FlightR", list = c("listAirlines","setAPIKey","setAppId"))
?package.skeleton
source('~/R_Projects/interestingR/Rfile/201801/0114_3_step_for_R_package.R')
package.skeleton(name = "FlightR", list = c("listAirlines","setAPIKey","setAppId"))
getURL
fromJSON
source('~/R_Projects/interestingR/Rfile/201801/0114_3_step_for_R_package.R')
package.skeleton(name = "FlightR", list = c("listAirlines","searchAirline","setAPIKey","setAppId"))
package.skeleton(name = "FlightR", list = c("listAirlines","searchAirline","setAPIKey","setAppId"))
getwd()
setwd("./FlightR")
getwd()
library(devtools)
document()
build()
install()
?install
setwd("~/R_Projects/interestingR/testRpackage")
install()
document()
package.skeleton(name = "testRpackage", list = c("setAppId"))
install()
document()
setwd("~/R_Projects/interestingR/testRpackage")
install()
library(roxygen2)
roxygenize("testRpackage")
roxygenize()
getwd()
roxygenize()
package.skeleton(name = "testR", list = c("searchAirline","setAPIKey","setAppId"))
setwd("~/R_Projects/interestingR/testR")
roxygenize()
install()
library(testR)
sms_data<-read.csv("~/SVM_classification_Data.csv",stringsAsFactors = FALSE)
sms_data<-read.csv("~/model_data/SVM_classification_Data.csv",stringsAsFactors = FALSE)
sms_data<-read.csv("~/model_data/classification_SVM_Data.csv",stringsAsFactors = FALSE)
head(sms_data)
View(sms_data)
sms_data = readxl::read_xlsx("~/model_data/SVM_classification_Data.xlsx")
head(sms_data)
View(sms_data)
?readxl::read_xlsx
sms_data<-read.csv("~/model_data/classification_SVM_Data.csv",stringsAsFactors = FALSE,fileEncoding = 'UTF-8')
View(sms_data)
sms_data<-read.csv("~/model_data/classification_SVM_Data.csv",stringsAsFactors = FALSE,encoding = 'UTF-8')
View(sms_data)
head(sms_data)
plot(c(-1,10), c(-1,10), type = "n", xlab = "x", ylab = "y", asp = 1)
abline(a =12 , b = -5, col=3)
text(1,5, "h(x)=0", col = 2, adj = c(-.1, -.1))
text(2,3, "h(x)>0,Ham", col = 2, adj = c(-.1, -.1))
text(0,3, "h(x)<0,Spam", col = 2, adj = c(-.1, -.1))
library(tm)
install.packages("tm")
library(tm)
sms_data$type<-factor(sms_data$type)
View(sms_data)
View(sms_data)
sms_data<-read.csv("~/model_data/classification_SVM_Data.csv",header = FALSE,stringsAsFactors = FALSE,encoding = 'UTF-8')
head(sms_data)
colnames(sms_data)
colnames(sms_data) = c("type","text")
sms_data$type<-factor(sms_data$type)
?Corpus
VectorSource(sms_data$text)[1:5]
str(VectorSource(sms_data$text))
simply_text<-Corpus(VectorSource(sms_data$text))
cleaned_corpus<-tm_map(simply_text, tolower)
cleaned_corpus<-tm_map(simply_text, tolower)
sms_data<-read.csv("~/model_data/classification_SVM_Data.csv",header = FALSE,stringsAsFactors = FALSE)
colnames(sms_data) = c("type","text")
sms_data$type<-factor(sms_data$type)
simply_text<-Corpus(VectorSource(sms_data$text))
cleaned_corpus<-tm_map(simply_text, tolower)
cleaned_corpus<-tm_map(cleaned_corpus,removeNumbers)
cleaned_corpus<-tm_map(cleaned_corpus,removeWords,stopwords())
sms_dtm<-DocumentTermMatrix(cleaned_corpus)
sms_train<-sms_dtm[1:4000]
sms_test<-sms_dtm[4001:5574]
freq_term=(findFreqTerms(sms_dtm,lowfreq=2))
y<-sms_data$type
y_train<-y[1:4000]
y_test<-y[4001:5574]
library(e1071)
tuned_svm<-tune(svm, train.x=sms_freq_train, train.y = y_train,kernel="linear", range=list(cost=10^(-2:2), gamma=c(0.1, 0.25,0.5,0.75,1,2)) )
sms_freq_train<-DocumentTermMatrix(sms_train,  list(dictionary=freq_term))
tuned_svm<-tune(svm, train.x=sms_train, train.y = y_train,kernel="linear", range=list(cost=10^(-2:2), gamma=c(0.1, 0.25,0.5,0.75,1,2)) )
freq_term=(findFreqTerms(sms_dtm,lowfreq=2))
sms_freq_train<-DocumentTermMatrix(sms_train,  list(dictionary=freq_term))
if (!require("pacman")) install.packages("pacman")
getOption("repos")
type = getOption("pkgType")
getOption("pkgType")
if (!require("pacman"))
install.packages("https://cran.r-project.org/src/contrib/Archive/pacman/pacman_0.4.6.tar.gz",repo = NULL,type = "source")
pacman::p_load(jpeg, png, ggplot2, grid, neuropsychology)
install.packages("https://cran.r-project.org/src/contrib/Archive/neuropsychology/neuropsychology_0.3.0.tar.gz",repo = NULL,type = "source")
library(neurochology)
library(neuropsychology)
pacman::p_load(jpeg, png, ggplot2, grid, neuropsychology)
pacman::p_load(jpeg, png, ggplot2, grid)
mydata <- data.frame(price = tapply(diamonds$price, diamonds$cut, max))
mydata$cut <- rownames(mydata)
imgage <- jpeg::readJPEG("blackboard.jpg")
getwd()
image = png::readPNG("images/blackboard.png")
ggplot(mydata, aes(cut, price, fill = -price)) +
ggtitle("Bar chart with background image") +
scale_fill_continuous(guide = FALSE) +
annotation_custom(rasterGrob(imgage,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_bar(stat="identity", position = "dodge", width = .75, colour = 'white') +
scale_y_continuous('Price in $', limits = c(0, max(mydata$price) + max(mydata$price) / 4)) +
scale_x_discrete('Cut') +
geom_text(aes(label = round(price), ymax = 0), size = 7, fontface = 2,
colour = 'white', hjust = 0.5, vjust = -1)
ggplot(mydata, aes(cut, price, fill = -price)) +
ggtitle("Bar chart with background image") +
scale_fill_continuous(guide = FALSE) +
annotation_custom(rasterGrob(image,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_bar(stat="identity", position = "dodge", width = .75, colour = 'white') +
scale_y_continuous('Price in $', limits = c(0, max(mydata$price) + max(mydata$price) / 4)) +
scale_x_discrete('Cut') +
geom_text(aes(label = round(price), ymax = 0), size = 7, fontface = 2,
colour = 'white', hjust = 0.5, vjust = -1)
ggplot(mydata, aes(cut, price, fill = -price)) +
theme_neuropsychology() +
ggtitle("Bar chart with background image") +
scale_fill_continuous(guide = FALSE) +
annotation_custom(rasterGrob(imgage,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_bar(stat="identity", position = "dodge", width = .75, colour = 'white', alpha = 0.5) +
scale_y_continuous('Price in $', limits = c(0, max(mydata$price) + max(mydata$price) / 4)) +
scale_x_discrete('Cut') +
geom_text(aes(label = round(price), ymax = 0), size = 7, fontface = 2,
colour = 'white', hjust = 0.5, vjust = -1)
pacman::p_load(jpeg, png, ggplot2, grid, neuropsychology)
ggplot(mydata, aes(cut, price, fill = -price)) +
theme_neuropsychology() +
ggtitle("Bar chart with background image") +
scale_fill_continuous(guide = FALSE) +
annotation_custom(rasterGrob(imgage,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_bar(stat="identity", position = "dodge", width = .75, colour = 'white', alpha = 0.5) +
scale_y_continuous('Price in $', limits = c(0, max(mydata$price) + max(mydata$price) / 4)) +
scale_x_discrete('Cut') +
geom_text(aes(label = round(price), ymax = 0), size = 7, fontface = 2,
colour = 'white', hjust = 0.5, vjust = -1)
ggplot(mydata, aes(cut, price, fill = -price)) +
theme_neuropsychology() +
ggtitle("Bar chart with background image") +
scale_fill_continuous(guide = FALSE) +
annotation_custom(rasterGrob(image,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_bar(stat="identity", position = "dodge", width = .75, colour = 'white', alpha = 0.5) +
scale_y_continuous('Price in $', limits = c(0, max(mydata$price) + max(mydata$price) / 4)) +
scale_x_discrete('Cut') +
geom_text(aes(label = round(price), ymax = 0), size = 7, fontface = 2,
colour = 'white', hjust = 0.5, vjust = -1)
?theme_neuropsychology
install.packages("rio")
shiny::runApp('~/R_Projects/workfloweR')
runApp('~/R_Projects/workfloweR')
set.seed(1234)
df.patients <- r_data_frame(n = 250,
age(x = 30:78,
name = 'Age'),
sex(x = c("Male", "Female"),
prob = c(0.70, 0.30),
name = "Sex"))
install.packages("wakefield")
library(wakefield)
set.seed(1234)
df.patients <- r_data_frame(n = 250,
age(x = 30:78,
name = 'Age'),
sex(x = c("Male", "Female"),
prob = c(0.70, 0.30),
name = "Sex"))
df.patients$Sample <- as.factor('Patients')
summary(df.patients)
pacman::p_load(dplyr, tidyr, ggplot2)
set.seed(1234)
df.population <- r_data_frame(n = 1000,
age(x = 18:80,
name = 'Age'),
sex(x = c("Male", "Female"),
prob = c(0.50, 0.50),
name = "Sex"))
df.population$Sample <- as.factor('Population')
summary(df.population)
mydata <- rbind(df.patients, df.population)
View(mydata)
mydata$Group <- as.logical(mydata$Sample == 'Patients')
View(mydata)
mydata$Distress <- ifelse(mydata$Sex == 'Male', age(nrow(mydata), x = 0:42, name = 'Distress'),
age(nrow(mydata), x = 15:42, name = 'Distress'))
View(mydata)
str(age(nrow(mydata), x = 0:42, name = 'Distress'))
pacman::p_load(tableone)
help(package = "haven")
library("haven", lib.loc="D:/R/R-3.3.3/library")
install.packages("haven")
pacman::p_load(tableone)
table1 <- CreateTableOne(vars = c('Age', 'Sex', 'Distress'),
data = mydata,
factorVars = 'Sex',
strata = 'Sample')
table1 <- print(table1,
printToggle = FALSE,
noSpaces = TRUE)
kable(table1[,1:3],
align = 'c',
caption = 'Table 1: Comparison of unmatched samples')
library(knitr)
kable(table1[,1:3],
align = 'c',
caption = 'Table 1: Comparison of unmatched samples')
table1
set.seed(1234)
match.it <- matchit(Group ~ Age + Sex, data = mydata, method="nearest", ratio=1)
install.packages("MatchIt")
library(MatchIt)
set.seed(1234)
match.it <- matchit(Group ~ Age + Sex, data = mydata, method="nearest", ratio=1)
a <- summary(match.it)
match.it
a
kable(a$nn, digits = 2, align = 'c',
caption = 'Table 2: Sample sizes')
kable(a$sum.matched[c(1,2,4)], digits = 2, align = 'c',
caption = 'Table 3: Summary of balance for matched data')
plot(match.it, type = 'jitter', interactive = FALSE)
df.match <- match.data(match.it)[1:ncol(mydata)]
rm(df.patients, df.population)
View(df.match)
table4 <- CreateTableOne(vars = c('Age', 'Sex', 'Distress'),
data = df.match,
factorVars = 'Sex',
strata = 'Sample')
table4 <- print(table4,
printToggle = FALSE,
noSpaces = TRUE)
kable(table4[,1:3],
align = 'c',
caption = 'Table 4: Comparison of matched samples')
file.exists("~/.ssh/id_rsa.pub")
